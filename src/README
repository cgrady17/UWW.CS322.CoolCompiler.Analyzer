README file for Programming Assignment 4 (Java edition)
======================================================

Your directory should now contain the following files:

 ASTConstants.java    -> [class dir]/src/PA4J/ASTConstants.java
 ASTLexer.java	      -> [class dir]/src/PA4J/ASTLexer.java
 ASTParser.java	      -> [class dir]/src/PA4J/ASTParser.java
 AbstractSymbol.java  -> [class dir]/src/PA4J/AbstractSymbol.java
 AbstractTable.java   -> [class dir]/src/PA4J/AbstractTable.java
 BoolConst.java       -> [course dir]/src/PA3J/BoolConst.java
 ClassTable.java
 Flags.java	      -> [class dir]/src/PA4J/Flags.java
 IdSymbol.java	      -> [class dir]/src/PA4J/IdSymbol.java
 IdTable.java	      -> [class dir]/src/PA4J/IdTable.java
 IntSymbol.java	      -> [class dir]/src/PA4J/IntSymbol.java
 IntTable.java	      -> [class dir]/src/PA4J/IntTable.java
 ListNode.java	      -> [class dir]/src/PA4J/ListNode.java
 Makefile	      -> [class dir]/etc/../assignments/PA4J/Makefile
 README
 Semant.java	      -> [class dir]/src/PA4J/Semant.java
 StringSymbol.java    -> [class dir]/src/PA4J/StringSymbol.java
 StringTable.java     -> [class dir]/src/PA4J/StringTable.java
 SymbolTable.java     -> [class dir]/src/PA4J/SymbolTable.java
 SymtabExample.java   -> [class dir]/src/PA4J/SymtabExample.java
 TokenConstants.java  -> [class dir]/src/PA4J/TokenConstants.java
 TreeConstants.java
 TreeNode.java	      -> [class dir]/src/PA4J/TreeNode.java
 Utilities.java	      -> [class dir]/src/PA4J/Utilities.java
 bad.cl
 cool-tree.aps	      -> [class dir]/src/PA4J/cool-tree.aps
 cool-tree.java
 good.cl

	The Makefile contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. Also, briefly describe how
	your group divided the work, summarizing each group member's
	contributions. It is part of the assignment to clearly and
	concisely explain things in text as well as to comment your
	code.  Just edit this file.

	good.cl and bad.cl test a few features of the semantic checker.
	You should add tests to ensure that good.cl exercises as many
	legal semantic combinations as possible and that bad.cl
	exercises as many kinds of semantic errors as possible.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST). This
	file is provided for your reference.  DO NOT MODIFY.

        TreeNode.java and ListNode.java contain definitions used by the
        tree package. DO NOT MODIFY.  

        cool-tree.java specifies and gives an implementation of Cool ASTs
        (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to add functions to the AST classes to
        store, fetch, and compute information about the AST.

   	You should NOT remove any definitions that are already present
   	in cool-tree.java.  These function and data members are required
   	for the system to function properly.

        You should add any fields and methods to the classes you need to
        perform semantic analysis.  You will need to add, for example,
        methods which traverse the expressions of the tree and implement
        the type-checking rules.  The entry point to the semantic
        analyzer is program.semant().

	ClassTable.java implements a placeholder class for a few useful
	methods.  Feel free to extend it to implement some real data
	structure.

	TreeConstants.java defined some useful symbol constants.  You
	may add some of your own, if you wish.

	ASTLexer.java, ASTParser.java, and ASTConstants.java implement a
	lexer and a parser for reading text representation of ASTs from
	console in the format produced by the parser phase. DO NOT
	MODIFY.

        Semant.java contains a driver to test the analyzer.  The main
        method reads an AST in text form from standard input, parses it,
        and then produces a type-annotated AST on standard output.  The
        script mycoolc can pass any of the standard flags to the
        semantic analyzer as well; for this assignment, -s (semantic
        analysis debug) may be useful as it sets a static variable
        Flags.semant_debug to "true".  If you want your semantic checker
        to print debug information when the option is set, write your
        debug code in the following format:

	      if (Flags.semant_debug)
	      {
		...
	      }

	semant_debug is provided as a convenience. You don't need to use
	the debugging flags if you don't want to. DON'T MODIFY
	Semant.java.

	SymbolTable.java contains a symbol table implementation. Read
	the comments in the file and look at the example in
	SymtabExample.java.  You are not required to use this code, but
	you may find it useful. DO NOT MODIFY.

Instructions
------------

	To compile the example use of the symbol table, type

	% make symtab-example

	This creates a shell script to run the symbol table example.

	To compile your semantic analyzer program type:

	% make semant

	To test your semantic checker, type:

	% mysemant foo.cl

	mysemant is a version of mycoolc that omits code generation.
	mysemant parses all the cool files given on the command line and
	builds a single abstract syntax tree containing all class
	definitions appearing in the input files. Your semantic checker
	is then called on this abstract syntax tree.  If there are no
	errors, the program produces a type-annotated abstract syntax
	tree as output.

	To run your checker on the files good.cl and bad.cl type:

	% make dotest

	If you think your semantic checker is correct and behaves like
	the one we wrote, you can try to run mycoolc using your checker,
	your parser and also your lexical analyzer if you choose (see
	below for instructions).  Remember if your lexer, parser or
	checker behaves in an unexpected manner, you may get errors
	anywhere.

	To turn in your work, type:

	% make submit-clean
	% 322submit PA4

	and answer the questions that the 322submit script asks you.
	
	Running "322submit" will collect the files cool-tree.java,
	ClassTable.java, TreeConstants.java, good.cl, bad.cl,
	good.output, bad.output, and README. Don't forget to edit the
	README file to include your write-up, and to write your own test
	cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like. All
	submissions are kept, but only the last one turned in before the
        deadline will be graded (unless your group requests otherwise).

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA4
----------------

We began in our efforts to build this semantic analyzer by first taking time to
fully understand the skeleton code provided. cool-tree.java was ~1400 lines of code
even as a skeleton so there was a lot to go through and try to follow. (Not to mention
the file broke best practices, putting a ton of classes into a single file). We decided then
that we wanted to contribute to even more depth to that one file and to instead separate our
custom code into disparate .java files. By doing so we only needed to expand cool-tree.java
by a handful of lines that served only to instantiate and call the Traverser.

In addition to taking this modular, and in our opinion more organized, path, we also made
other decision regarding collection types. In class you mentioned there were really two
different collection types to use, either a linked list or a hash table. This made us think of
the LinkedHashMap<key, value> collection which is a hash table and linked list implementation
of the map. The reason we chose this was that it offered a predictable iteration order (to help
with debugging) and built-in function for checking whether a key or a value existed within the
LinkedHashMap as well a getter and putter. Overall, we were very pleased with our decision
to use a LinkedHashMap.

Our analyzer begins by instantiating a Traverser, sourced from our custom Traverser.java,
for basic classes. The Traverser then loops through each of the basic classes and then
loops through each of the Class' features. It then traverses that feature differently
based on whether the feature is an attribute of the Class or a method. Traversing an expression
is, of course, the largest and most verbose part of the overall feature traversal. This
where we handle each of the different possibilities, like dispatch, assignment, etc.

When traversal begins, we start by calling InheritanceTree.build()::void which
will build out our entire inheritance tree which serves the primary function
of add inheriting all features from a parent to its child and the confirming
that the child contains all of its parent's features. It recurses over all
the children of each class, eventually emanating through all classes.

We also have some fatal errors, wherein they would immediately stop the execution of the analyzer.
An example of this would be when an complex class inherits from an un-allowed primitive, ie. Int, Bool,
or String. Otherwise, we'll use ClassTable.semantError()::PrintStream to output and log the error
but not interrupt execution.

Regarding passes of traversal, we opted to perform a single pass over the AST for both
basic and complex classes. Within the pass we perform scoping, inheritance checks, and type checks.
We know most actual compilers perform multiple passes, but doing a single pass for COOL seemed,
after confirming our tests, to be more than adequate. It also helped keep our code streamlined.

For this project, we met five times in-person, including in the Collaboration Rooms in Anderson's GAL,
to work. Being able to hookup to a project and all of us work off one screen helped greatly to work
though everything together. In addition to this, we also worked separately on our assigned items (see below).

Speaking of testing, we expanded on good.cl and bad.cl to include significantly more test cases, and
test cases that were more thorough. In good.cl, we create COOL classes to perform arithmetic and
even a Node class. We validated our good.cl test cases by comparing output between our semant and
the semant default on Washington. Bad.cl was easier to make because we could just seriously abuse
COOL and it's one of the few times where getting errors is desired. We did things like inheriting from
un-allowed primitives, calling non-existant methods, passing the wrong number and type of parameters, etc.
We then also tested our semantic analyzer on several of the example COOL classes in /opt/cs322/examples,
including on lam.cl, to ensure they worked as well.

Regarding the division of work among group members, everyone contributed evenly with the exception
of our added member, Fabricio. Unfortunately, he did not attend any group meetings, respond to any
communications from us, nor contribute in any other way to the project. Connor primarily focused
on the Inheritance part, creating InheritanceTree.java and expanding ClassTable. Andrew worked on
the Traverser, primarily traversing Expressions and type checking. Adam worked on building out our
Traverser, but primarily focused on creating our test cases. Finally, Brian also worked on the Traverser
(basically we all played a part in the Traverser, as it is the majority of program), and guided our
design. Because we worked together for much of this off one screen, we all got to participate in the creation
of most of the program. We would recommend getting a Collaboration room in either Anderson's GAL or main floor
for future students (they do require reservations, though).